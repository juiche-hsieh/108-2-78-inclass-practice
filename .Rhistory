course <- list(
approve = list(T),
course_info = list(
course_name = "會計學",
type = "必",
credits = c(3),
time_place = list(
list(
weekday = "星期三",
time_slots = c(7, 8, 9),
classroom = "商2F05"
)
))
)
str(course)
# course
course <- list(
approve = T,
course_info = list(
course_name = "會計學",
type = "必",
credits = c(3),
time_place = list(
list(
weekday = "星期三",
time_slots = c(7, 8, 9),
classroom = "商2F05"
)
))
)
str(course)
# course
typeof(course)
class(approve)
course <- list(
approve = T,
course_info = list(
course_name = "會計學",
type = "必",
credits = c(3),
time_place = list(
list(
weekday = "星期三",
time_slots = c(7, 8, 9),
classroom = "商2F05"
)
))
)
str(course)
# course
View(course)
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
course <- list(
approve = T,
course_info = list(
course_name = "會計學",
type = "必",
credits = c(3),
time_place = list(
list(
weekday = "星期三",
time_slots = c(7, 8, 9),
classroom = "商2F05"
)
))
)
typeof(course)
class(approve)
course <- list(
approve = T,
course_info = list(
course_name = "會計學",
type = "必",
credits = c(3),
time_place = list(
list(
weekday = "星期三",
time_slots = c(7, 8, 9),
classroom = "商2F05"
)
))
)
typeof(course)
class(course[["approve"])
course <- list(
approve = T,
course_info = list(
course_name = "會計學",
type = "必",
credits = c(3),
time_place = list(
list(
weekday = "星期三",
time_slots = c(7, 8, 9),
classroom = "商2F05"
)
))
)
typeof(course)
(course[["approve"])
course <- list(
approve = T,
course_info = list(
course_name = "會計學",
type = "必",
credits = c(3),
time_place = list(
list(
weekday = "星期三",
time_slots = c(7, 8, 9),
classroom = "商2F05"
)
))
)
typeof(course)
class(course[["approve"]])
# course_update
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
typeof(course)
class(course[["approve"]])
# course_update
typeof(course)
logical(course[["approve"]])
typeof(course)
as.logical(course[["approve"]])
# course_update
course[[type]] <- "選"
course[[type]] <- "選"
course[["type"]] <- "選"
as.logical(course[["approve"]])
save(course_update, file="course_update.list")
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
# course_update
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
str(course)
# course_update
course[["type"]] <- "選"
as.logical(course[["approve"]])
course
course_update <- course
save(course_update, file="course_update.list")
str(course)
# course_update
course[["type"]] <- "選"
as.logi(course[["approve"]])
course[["type"]] <- "選"
as.logical(course[["approve"]])
course
course_update <- course
save(course_update, file="course_update.list")
str(course)
# course_update
course[["type"]] <- "選"
as.logical(course[["approve"]])
course
course_update <- course
save(course_update, file="course_update.list")
# course_update
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
# course_update
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
class(approve)
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
class(cpurse[["approve"])
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
class(course[["approve"])
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
class(course[["approve"]])
# course_update
time_place <- course[["time_place"]]
save(time_place, file="time_place.Rda")
# time_place
time_place <- course[["time_place"]]
save(time_place, file="time_place.Rda")
str(course[["time_place"]])
# time_place
course[["type"]] <- "選"
as.logical(course[["approve"]])
course_update <- course
save(course_update, file="course_update.list")
# course_update
class(course[["approve"]])
# course_update
course[[2]]$type<-"選"
course$approve<-"F"
course->course_update
# course_update
course[[2]]$type<-"選"
course$approve<-"F"
course->course_update
class(course)
# course_update
course[[2]]$type<-"選"
course$approve<-"F"
course->course_update
class(approve)
# course_update
course[[2]]$type<-"選"
course$approve<-"F"
course->course_update
class(course$approve)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite)
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
str(course)
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
str(course)
course[[2]]$type<-"選"
course$approve<-"F"
course->course_update
str(course_update)
class(course$approve)
# course_update
course$type<-"選"
course$approve<-"F"
course->course_update
class(course$approve)
# course_update
course$type <- "選"
as.logical(course$approve)
course->course_update
class(course$approve)
course[[2]][[4]]->time_place
str(time_place)
time_place <- course[["time_place"]]
# time_place
time_place <- course[["time_place"]]
str(time_place)
# time_place
time_place <- course$time_place
# time_place
time_place <- course$time_place
# time_place
time_place <- course$time_place
str(time_place))
time_place <- course$time_place
str(time_place)
# time_place
course[[2]][[4]]->time_place
str(time_place)
# time_place
# course_update
course$type <- "選"
as.logical(course$approve)
course->course_update
str(course)
# course_update
as.logical(course$approve)
course -> course_update
str(course)
# course_update
course$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
# course_update
course$type <- "選"
as.logical(course$approve)
course -> course_update
# course_update
course$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
str(course)
# course_update
course$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
# course_update
course[[2]]$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
# course_update
course$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
str(course)
# course_update
course$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
# course_update
course$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
# course_update
course[[2]]$type <- "選"
as.logical(approve)
# course_update
course[[2]]$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
# course_update
course[[2]]$type <- "選"
as.logical(course$approve = T)
# course_update
course[[2]]$type <- "選"
as.logical(course$approve = "T")
# course_update
course[[2]]$type <- "選"
as.logical(course$approve)
course -> course_update
str(course)
course_update[[2]][["teacher"]] <- "紀學檜"
course_update2 <- course_update
# course_update2
# course_update
course[[2]]$type <- "選"
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
course[[2]]$type <- "選"
as.logical(course[[3]]$approve)
# course_update
course[[2]]$type <- "選"
as.logical(course[[1]]$approve)
# course_update
course[[2]]$type <- "選"
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
course[[2]]$type <- "選"
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
as.logical(course[[2]]$approve)
course -> course_update
str(course)
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
str(course)
# course_update
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
course$type <- "選"
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
course[[2]]$type <- "選"
as.logical(course[[2]]$approve)
course -> course_update
str(course)
course_update[[2]][["teacher"]] <- "紀學檜"
course_update2 <- course_update
# course_update2
# course_update
course[[2]]$type <- "選"
as.logical(course[[1]]$approve)
# course_update
course[[2]]$type <- "選"
as.logical(course[[2]]$approve)
course -> course_update
str(course)
# course_update
course[[2]]$type <- "選"
as.logical(course[[0]]$approve)
# course_update
course[[2]]$type <- "選"
as.logical(course[[2]]$approve)
course -> course_update
str(course)
knitr::opts_chunk$set(echo = TRUE)
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 1) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 2) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 3) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 4) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 5) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 6) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 7) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 8 ) # 要，要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)],max.level = 7 ) # 要，要
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 # 學期拿出來，有3個元素的list
str(get1)
get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2)
get1 # 學期拿出來，有3個元素的list
str(get1, max.level = 1)
# get1 # 學期拿出來，有3個元素的list
str(get1, max.level = 1)
# get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2, max.level = 1)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)]
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- majors[c(T,T,F,F,T)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- majors[c(T,T,F,F,T)]; econOnly
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- list(
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系"),
names <- c("小英", "小美", "大雄","阿華", "阿尼"),
gender <- c("F","F","M","F","M")
)
econOnly
names[]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- list(
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系"),
names <- c("小英", "小美", "大雄","阿華", "阿尼"),
gender <- c("F","F","M","F","M")
)
econOnly[["names"]]; econOnly[["gender"]]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- list(
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系"),
names <- c("小英", "小美", "大雄","阿華", "阿尼"),
gender <- c("F","F","M","F","M")
)
econOnly$names; econOnly$gender
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- list(
majors = c("經濟學系","經濟學系","社會學系","社工系","經濟學系"),
names = c("小英", "小美", "大雄","阿華", "阿尼"),
gender = c("F","F","M","F","M")
)
econOnly$names; econOnly$gender
